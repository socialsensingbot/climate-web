type UserPreferences @model @auth(rules: [{allow: private}, {allow: owner, operations: [create, update, delete, read]}]) {
  id: ID!
#  ignoreTweets: [TweetIgnore] @connection(name: "UserTweetIgnores")
#  ignorePeople: [TwitterUserIgnore] @connection(name: "UserTwitterUserIgnores")
  prefs: AWSJSON
}

type UserSession @model(timestamps: {createdAt: "createdAt", updatedAt: "updatedAt"}) @auth(rules: [{allow: private}]) {
  id: ID!
  fingerprint: String
  client: AWSJSON
  open: Boolean!
  ttl: AWSTimestamp
}

type GroupPreferences @model @auth(rules: [{allow: private, operations: [read]}, {allow: groups, groupsField: "group"}]) {
  id: ID!
  group: String!
  prefs: AWSJSON
}

type GroupTweetIgnore @model(timestamps: {createdAt: "createdAt", updatedAt: "updatedAt"}) @auth(rules: [{allow: groups, groupsField: "ownerGroups"}, {allow: private, operations: [read]}]) {
  id: ID!
  url: String!
  ignoredBy: String!
  tweetId: String!
  ownerGroups: [String]
  scope: String!
}

type GroupTwitterUserIgnore @model(timestamps: {createdAt: "createdAt", updatedAt: "updatedAt"}) @auth(rules: [{allow: groups, groupsField: "ownerGroups"}, {allow: private, operations: [read]}]) {
  id: ID!
  twitterScreenName: String!
  ignoredBy: String!
  ownerGroups: [String]
  scope: String!
}

#type TweetIgnore @model @auth(rules: [{allow: private}]) {
#  id: ID!
#  url: String!
#  tweetId: String
#  user: UserPreferences @connection(name: "UserTweetIgnores")
#}
#
#type TwitterUserIgnore @model @auth(rules: [{allow: private}]) {
#  id: ID!
#  twitterScreenName: String!
#  user: UserPreferences @connection(name: "UserTwitterUserIgnores")
#}
#
