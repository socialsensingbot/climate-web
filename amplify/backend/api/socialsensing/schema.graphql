type UserPreferences @model @auth(
  rules: [
    {allow: owner, operations: [create, update, delete, read]},
  ]){
  id: ID!
  ignoreTweets: [TweetIgnore] @connection(name: "UserTweetIgnores")
  ignorePeople: [TwitterUserIgnore] @connection(name: "UserTwitterUserIgnores")
  irrelevant: [TweetIrrelevant] @connection(name: "UserTweetIrrelevant")
}

type UserSession @model @auth(
  rules: [
    {allow: owner},
  ]){
  id: ID!
  fingerprint: String
  open: Boolean!
}


type GroupPreferences @model @auth(rules: [{allow: groups, groupsField: "group"}]){
  id: ID!
  ignoreTweets: [GroupTweetIgnore] @connection(name: "GroupTweetIgnores")
  ignorePeople: [GroupTwitterUserIgnore] @connection(name: "GroupTwitterUserIgnores")
  group: String
}


type GroupTweetIgnore @model  @auth(rules: [{allow: groups}]) {
  id: ID!
  url: String!
  tweetId: String
  group: GroupPreferences @connection(name: "GroupTweetIgnores")
}


type GroupTwitterUserIgnore @model  @auth(rules: [{allow: groups}]) {
  id: ID!
  twitterScreenName: String!
  group: GroupPreferences @connection(name: "GroupTwitterUserIgnores")
}



type TweetIgnore @model @auth(rules: [ {allow: owner}]) {
  id: ID!
  url: String!
  tweetId: String
  user: UserPreferences @connection(name: "UserTweetIgnores")
}


type TwitterUserIgnore @model  @auth(rules: [ {allow: owner}]) {
  id: ID!
  twitterScreenName: String!
  user: UserPreferences @connection(name: "UserTwitterUserIgnores")
}

#To be deleted

type TweetIrrelevant @model  @auth(rules: [ {allow: owner}]) {
  id: ID!
  url: String!
  tweetId: String
  user: UserPreferences @connection(name: "UserTweetIrrelevant")
}
